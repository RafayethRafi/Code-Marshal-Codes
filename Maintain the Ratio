//https://drive.google.com/file/d/13mOx1ph8hNpEMHM6rc6aQ_3wGadxX-xx/view

#include<bits/stdc++.h>
using namespace std;
#define endl '\n'
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;

typedef tree< long long, null_type, less_equal<long long>, rb_tree_tag, tree_order_statistics_node_update > ordered_set;
/// change ll to any data type
/// less_equal for multiset increasing order
/// less for set increasing order
/// greater_equal for multiset decreasing order
/// greater for set decreasing order

/// cout<<*X.find_by_order(1)<<endl; // iterator to the k-th largest element
/// cout<<X.order_of_key(-5)<<endl;  // number of items in a set that are strictly smaller than our item

const int mx = 2e6+123;
long long sum0[mx],sum1[mx];

int main()
{
    optimize();
    int t;
    cin>>t;
    for(int tc =1;tc<=t;tc++)
    {
        string s;
        int k,n,i;
        cin>>s>>k;
        n = s.size();

        for(i=0;i<n;i++)
        {
            sum0[i+1] = (s[i]== '0') + sum0[i];
            sum1[i+1] = (s[i]== '1') + sum1[i];
        }
        ordered_set ps;
        map<int,int>cnt;
        ps.insert(0);
        cnt[0]++;
        long long ans =0;

        for(i=1;i<=n;i++)
        {
            long long d1 = sum0[i] - (k*sum1[i]);

            ans += (ps.order_of_key(d1)) + cnt[d1];
            ps.insert(d1);
            cnt[d1]++;
        }
        cout<<"Case "<<tc<<": "<<ans<<endl;
    }

    return 0;
}
